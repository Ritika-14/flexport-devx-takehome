name: Lint, Build, Test and Deploy
on:
  push:
    branches:
      - main
      - feat/kubernetes

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -U -r requirements.txt
        pip install pylint black pytest
        pip install pytest-cov
        export URL=http://localhost:5000
    - name: Run black and pylint
      run: |
        black ./
        pylint **/*.py
    - name: Run Unit Tests with coverage
      run: |
        PYTHONPATH="${PYTHON_PATH}:./src" python -m pytest -v tests/unit
    - name: Run Functional Tests with coverage
      run: |
        PYTHONPATH="${PYTHON_PATH}:./src" python -m pytest -v tests/functional
  build-test-publish:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Docker meta
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v1
      with:
        images: ghcr.io/ritika-14/docker-image
        tag-sha: false
        tag-edge: false
        tag-latest: true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{github.actor}}
        password: ${{secrets.GHCR_TOKEN}}

    - name: Build and test Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{steps.docker_meta.outputs.tags}}
        file: ./Dockerfile

    - name: Setup Python environment
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: python -m pip install -U -r requirements.txt

    - name: Publish Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{steps.docker_meta.outputs.tags}}
        file: ./Dockerfile
  kind-deploy:
    runs-on: ubuntu-latest
    needs: build-test-publish
    steps:
      - uses: actions/checkout@v3
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.4.0
        with:
          config: ./kind-cluster/config.yaml
      - name: Testing
        run: |
          kubectl wait nodes --for condition=Ready --all
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo "current-context:" $(kubectl config current-context)
          echo "environment-kubeconfig:" ${KUBECONFIG}
      - name: Deploy Application
        run: |
          kubectl create deployment my-deployment --image=ghcr.io/ritika-14/docker-image:feat-kubernetes@sha256:c1e214a64898a2a50764ee16509e32829e3d0461d2a393dd2d5e405dbb6ccc9e
          kubectl wait pods --for condition=Ready --timeout=90s --all
          kubectl expose deployment/my-deployment --type=NodePort --port 8080
          kubectl apply -f ./kind-cluster/service.yaml
      - name: Test Deployment
        run: |
          export NODE_PORT=$(kubectl get services/my-service -o go-template='{{(index .spec.ports 0).nodePort}}')
          echo NODE_PORT=${NODE_PORT}
          export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' | tail -1 )
          kubectl exec -ti $POD_NAME -- apt-get update
          kubectl exec -ti $POD_NAME -- apt-get -y install curl
          kubectl exec -ti $POD_NAME -- curl localhost:5000/health
          export URL=http://localhost:5000
          pytest tests/integration
          pytest --cov tests/integration --cov-report term-missing

      - name: Cleanup
        if: always()
        run: |
          kind delete cluster --name test-cd

  
